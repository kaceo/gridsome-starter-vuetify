{"remainingRequest":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/babel-loader/lib/index.js??ref--1-1!/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/gridsome/app/page-query/index.js","dependencies":[{"path":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/gridsome/app/page-query/index.js","mtime":1547622922997},{"path":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/cache-loader/dist/cjs.js","mtime":1544326630000},{"path":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/babel-loader/lib/index.js","mtime":1547551806025}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\nvar _cache = _interopRequireDefault(require(\"./cache\"));\n\nvar merge = _vue.default.config.optionMergeStrategies;\n\nvar _default = function _default(_ref) {\n  var options = _ref.options;\n  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (options.__pageQuery) {\n    options.__pageQuery = query;\n    return;\n  }\n\n  options.__pageQuery = query;\n  options.computed = merge.computed({\n    $page: function $page() {\n      return process.isServer ? this.$ssrContext.pageQuery.data : _cache.default.get(this.$route.path);\n    }\n  }, options.computed);\n\n  if (process.isClient) {\n    var createRouteGuard = function createRouteGuard(hook) {\n      options[hook] = merge[hook]([createGuardFunc(options)], options[hook]);\n    };\n\n    var createGuardFunc = function createGuardFunc() {\n      return function (to, from, next) {\n        import(\n        /* webpackChunkName: \"page-query\" */\n        './fetch').then(function (m) {\n          m.default(to, options.__pageQuery).then(next);\n        });\n      };\n    };\n\n    createRouteGuard('beforeRouteEnter');\n    createRouteGuard('beforeRouteUpdate');\n  }\n};\n\nexports.default = _default;",{"version":3,"sources":["node_modules/gridsome/app/page-query/index.js"],"names":["merge","Vue","config","optionMergeStrategies","options","query","__pageQuery","computed","$page","process","isServer","$ssrContext","pageQuery","data","cache","get","$route","path","isClient","createRouteGuard","hook","createGuardFunc","to","from","next","then","m","default"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,KAAK,GAAGC,aAAIC,MAAJ,CAAWC,qBAAzB;;eAEe,wBAA+B;AAAA,MAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,MAAjBC,KAAiB,uEAAT,IAAS;;AAC5C,MAAID,OAAO,CAACE,WAAZ,EAAyB;AACvBF,IAAAA,OAAO,CAACE,WAAR,GAAsBD,KAAtB;AACA;AACD;;AAEDD,EAAAA,OAAO,CAACE,WAAR,GAAsBD,KAAtB;AAEAD,EAAAA,OAAO,CAACG,QAAR,GAAmBP,KAAK,CAACO,QAAN,CAAe;AAChCC,IAAAA,KADgC,mBACvB;AACP,aAAOC,OAAO,CAACC,QAAR,GACH,KAAKC,WAAL,CAAiBC,SAAjB,CAA2BC,IADxB,GAEHC,eAAMC,GAAN,CAAU,KAAKC,MAAL,CAAYC,IAAtB,CAFJ;AAGD;AAL+B,GAAf,EAMhBb,OAAO,CAACG,QANQ,CAAnB;;AAQA,MAAIE,OAAO,CAACS,QAAZ,EAAsB;AACpB,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,IAAI,EAAI;AAC/BhB,MAAAA,OAAO,CAACgB,IAAD,CAAP,GAAgBpB,KAAK,CAACoB,IAAD,CAAL,CAAY,CAACC,eAAe,CAACjB,OAAD,CAAhB,CAAZ,EAAwCA,OAAO,CAACgB,IAAD,CAA/C,CAAhB;AACD,KAFD;;AAIA,QAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,aAAO,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACzB;AAAO;AAAqC,iBAA5C,EAAuDC,IAAvD,CAA4D,UAAAC,CAAC,EAAI;AAC/DA,UAAAA,CAAC,CAACC,OAAF,CAAUL,EAAV,EAAclB,OAAO,CAACE,WAAtB,EAAmCmB,IAAnC,CAAwCD,IAAxC;AACD,SAFD;AAGD,OAJD;AAKD,KAND;;AAQAL,IAAAA,gBAAgB,CAAC,kBAAD,CAAhB;AACAA,IAAAA,gBAAgB,CAAC,mBAAD,CAAhB;AACD;AACF,C","sourceRoot":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3","sourcesContent":["import Vue from 'vue'\nimport cache from './cache'\n\nconst merge = Vue.config.optionMergeStrategies\n\nexport default ({ options }, query = true) => {\n  if (options.__pageQuery) {\n    options.__pageQuery = query\n    return\n  }\n\n  options.__pageQuery = query\n\n  options.computed = merge.computed({\n    $page () {\n      return process.isServer\n        ? this.$ssrContext.pageQuery.data\n        : cache.get(this.$route.path)\n    }\n  }, options.computed)\n\n  if (process.isClient) {\n    const createRouteGuard = hook => {\n      options[hook] = merge[hook]([createGuardFunc(options)], options[hook])\n    }\n\n    const createGuardFunc = () => {\n      return (to, from, next) => {\n        import(/* webpackChunkName: \"page-query\" */ './fetch').then(m => {\n          m.default(to, options.__pageQuery).then(next)\n        })\n      }\n    }\n\n    createRouteGuard('beforeRouteEnter')\n    createRouteGuard('beforeRouteUpdate')\n  }\n}\n"]}]}