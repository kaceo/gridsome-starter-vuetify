{"remainingRequest":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/babel-loader/lib/index.js??ref--1-1!/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/gridsome/app/utils/helpers.js","dependencies":[{"path":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/gridsome/app/utils/helpers.js","mtime":1547622922997},{"path":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/cache-loader/dist/cjs.js","mtime":1544326630000},{"path":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3/node_modules/babel-loader/lib/index.js","mtime":1547551806025}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unslash = unslash;\nexports.url = url;\nexports.stripPathPrefix = stripPathPrefix;\nvar publicPath = process.env.PUBLIC_PATH;\n\nfunction unslash(string) {\n  return string.replace(/^\\/+|\\/+$/g, '');\n}\n\nfunction url(string) {\n  return \"\".concat(publicPath).concat(string).replace(/\\/+/g, '/');\n}\n\nvar re = new RegExp(\"^\".concat(publicPath));\nvar replacement = publicPath !== '/' ? '' : '/';\n\nfunction stripPathPrefix(string) {\n  return string.replace(re, replacement);\n}",{"version":3,"sources":["node_modules/gridsome/app/utils/helpers.js"],"names":["publicPath","process","env","PUBLIC_PATH","unslash","string","replace","url","re","RegExp","replacement","stripPathPrefix"],"mappings":";;;;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA/B;;AAEO,SAASC,OAAT,CAAkBC,MAAlB,EAA0B;AAC/B,SAAOA,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAP;AACD;;AAEM,SAASC,GAAT,CAAcF,MAAd,EAAsB;AAC3B,SAAO,UAAGL,UAAH,SAAgBK,MAAhB,EAAyBC,OAAzB,CAAiC,MAAjC,EAAyC,GAAzC,CAAP;AACD;;AAED,IAAME,EAAE,GAAG,IAAIC,MAAJ,YAAeT,UAAf,EAAX;AACA,IAAMU,WAAW,GAAGV,UAAU,KAAK,GAAf,GAAqB,EAArB,GAA0B,GAA9C;;AACO,SAASW,eAAT,CAA0BN,MAA1B,EAAkC;AACvC,SAAOA,MAAM,CAACC,OAAP,CAAeE,EAAf,EAAmBE,WAAnB,CAAP;AACD","sourceRoot":"/srv/dev-disk-by-label-NAS15T2017/code/k/test/g3","sourcesContent":["const publicPath = process.env.PUBLIC_PATH\n\nexport function unslash (string) {\n  return string.replace(/^\\/+|\\/+$/g, '')\n}\n\nexport function url (string) {\n  return `${publicPath}${string}`.replace(/\\/+/g, '/')\n}\n\nconst re = new RegExp(`^${publicPath}`)\nconst replacement = publicPath !== '/' ? '' : '/'\nexport function stripPathPrefix (string) {\n  return string.replace(re, replacement)\n}\n"]}]}